"""
Configuration and path utilities for SimNIBS-based workflows.

This module reads configuration settings from `config.ini` and sets up
directory paths (e.g., data path, code path, database directory). It
also provides helper functions to retrieve simulation output paths
and mesh file paths.
"""


import configparser
from pathlib import Path

# Global config parser
config = configparser.ConfigParser(delimiters=("="))
config.read((Path(__file__).resolve().parent.parent / "config.ini").as_posix())

#: Global variable that stores the name of the mesh. Used by get_sim_mesh_path().
MESH_NAME = ""

def set_mesh_name(mesh_name: str) -> None:
    """
    Set the global mesh name used by simulation functions.

    Parameters
    ----------
    mesh_name : str
        A string indicating the mesh name (e.g., 'Ernie').

    Returns
    -------
    None
    """
    global MESH_NAME
    MESH_NAME = mesh_name

# Data directory
data_dir = config["Settings"]["data_dir"]
if data_dir == "default":
    DATA_PATH = Path(__file__).resolve().parent.parent
else:
    DATA_PATH = Path(data_dir)

#: Code directory (parent of the current file)
CODE_PATH = Path(__file__).resolve().parent.parent

#: Directory name for simulations
DATABASE_NAME = "database"
SIMULATION_DIR_NAME = "Docker_Sim"

#: Base directory for Docker-based simulations (within the code path)
SIMULATION_BASE = CODE_PATH / SIMULATION_DIR_NAME

#: Base directory for the database
DATABASE_DIR = DATA_PATH / DATABASE_NAME

#: Dictionary storing sub-directory paths within the database
DATABASE_PATHS = {
    "main" : DATABASE_DIR,
    "interpolation" : DATABASE_DIR / "ip_data",
    "process" : DATABASE_DIR / "process_data",
    "compare" : DATABASE_DIR / "compare_data",
    "roi" : DATABASE_DIR / "roi_data",
    "original" : DATABASE_DIR / "original_data",
    "electrode" : DATABASE_DIR / "electrode_positions",
    "plot" : DATABASE_DIR / "plot_data"
}

# Ensure each path exists
for path in DATABASE_PATHS.values():
    path.mkdir(parents=True, exist_ok=True)


def get_sim_output_path(current_ensemble: str) -> Path:
    """
    Retrieve the path where simulation outputs are stored for a given ensemble.

    Parameters
    ----------
    current_ensemble : str
        The identifier (string) for the simulation ensemble/config.

    Returns
    -------
    Path
        A Path object pointing to the simulation output directory.
    """
    return DATA_PATH / current_ensemble


def get_sim_mesh_path(current_ensemble: str, electrode_index: str) -> Path:
    """
    Construct the full path to a .msh file generated by SimNIBS for a specific electrode.

    This function uses the global MESH_NAME variable set via set_mesh_name().

    Parameters
    ----------
    current_ensemble : str
        The ensemble/config name (string).
    electrode_index : str
        A string index identifying a specific electrode in this ensemble.

    Returns
    -------
    Path
        A Path object pointing to the final SimNIBS .msh file.
    """
    return (get_sim_output_path(current_ensemble)) / f"Electrode_{electrode_index}/results/{MESH_NAME}/Simulation_0/{MESH_NAME}_TDCS_1_scalar.msh"
